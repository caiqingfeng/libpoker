// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace luyun {
namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2eproto();
void protobuf_AssignDesc_msg_2eproto();
void protobuf_ShutdownFile_msg_2eproto();

class OtaMsg;
class OtaMulticast;

// ===================================================================

class OtaMsg : public ::google_public::protobuf::Message {
 public:
  OtaMsg();
  virtual ~OtaMsg();

  OtaMsg(const OtaMsg& from);

  inline OtaMsg& operator=(const OtaMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const OtaMsg& default_instance();

  void Swap(OtaMsg* other);

  // implements Message ----------------------------------------------

  OtaMsg* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const OtaMsg& from);
  void MergeFrom(const OtaMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google_public::protobuf::int32 version() const;
  inline void set_version(::google_public::protobuf::int32 value);

  // required int32 msg_id = 2;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  inline ::google_public::protobuf::int32 msg_id() const;
  inline void set_msg_id(::google_public::protobuf::int32 value);

  // optional string device_id = 3;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 3;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // required string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // required int64 time_stamp = 5;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 5;
  inline ::google_public::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google_public::protobuf::int64 value);

  // optional string server_handler = 10;
  inline bool has_server_handler() const;
  inline void clear_server_handler();
  static const int kServerHandlerFieldNumber = 10;
  inline const ::std::string& server_handler() const;
  inline void set_server_handler(const ::std::string& value);
  inline void set_server_handler(const char* value);
  inline void set_server_handler(const char* value, size_t size);
  inline ::std::string* mutable_server_handler();
  inline ::std::string* release_server_handler();
  inline void set_allocated_server_handler(::std::string* server_handler);

  // optional string debug_info = 100;
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 100;
  inline const ::std::string& debug_info() const;
  inline void set_debug_info(const ::std::string& value);
  inline void set_debug_info(const char* value);
  inline void set_debug_info(const char* value, size_t size);
  inline ::std::string* mutable_debug_info();
  inline ::std::string* release_debug_info();
  inline void set_allocated_debug_info(::std::string* debug_info);

  // @@protoc_insertion_point(class_scope:com.luyun.msg.OtaMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_server_handler();
  inline void clear_has_server_handler();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::int32 version_;
  ::google_public::protobuf::int32 msg_id_;
  ::std::string* device_id_;
  ::std::string* uid_;
  ::google_public::protobuf::int64 time_stamp_;
  ::std::string* server_handler_;
  ::std::string* debug_info_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static OtaMsg* default_instance_;
};
// -------------------------------------------------------------------

class OtaMulticast : public ::google_public::protobuf::Message {
 public:
  OtaMulticast();
  virtual ~OtaMulticast();

  OtaMulticast(const OtaMulticast& from);

  inline OtaMulticast& operator=(const OtaMulticast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const OtaMulticast& default_instance();

  void Swap(OtaMulticast* other);

  // implements Message ----------------------------------------------

  OtaMulticast* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const OtaMulticast& from);
  void MergeFrom(const OtaMulticast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string multicast_id = 1;
  inline bool has_multicast_id() const;
  inline void clear_multicast_id();
  static const int kMulticastIdFieldNumber = 1;
  inline const ::std::string& multicast_id() const;
  inline void set_multicast_id(const ::std::string& value);
  inline void set_multicast_id(const char* value);
  inline void set_multicast_id(const char* value, size_t size);
  inline ::std::string* mutable_multicast_id();
  inline ::std::string* release_multicast_id();
  inline void set_allocated_multicast_id(::std::string* multicast_id);

  // repeated string uid = 2;
  inline int uid_size() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline const ::std::string& uid(int index) const;
  inline ::std::string* mutable_uid(int index);
  inline void set_uid(int index, const ::std::string& value);
  inline void set_uid(int index, const char* value);
  inline void set_uid(int index, const char* value, size_t size);
  inline ::std::string* add_uid();
  inline void add_uid(const ::std::string& value);
  inline void add_uid(const char* value);
  inline void add_uid(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& uid() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_uid();

  // @@protoc_insertion_point(class_scope:com.luyun.msg.OtaMulticast)
 private:
  inline void set_has_multicast_id();
  inline void clear_has_multicast_id();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* multicast_id_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> uid_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static OtaMulticast* default_instance_;
};
// ===================================================================


// ===================================================================

// OtaMsg

// required int32 version = 1;
inline bool OtaMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtaMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtaMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtaMsg::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google_public::protobuf::int32 OtaMsg::version() const {
  return version_;
}
inline void OtaMsg::set_version(::google_public::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// required int32 msg_id = 2;
inline bool OtaMsg::has_msg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtaMsg::set_has_msg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtaMsg::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtaMsg::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
inline ::google_public::protobuf::int32 OtaMsg::msg_id() const {
  return msg_id_;
}
inline void OtaMsg::set_msg_id(::google_public::protobuf::int32 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// optional string device_id = 3;
inline bool OtaMsg::has_device_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OtaMsg::set_has_device_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OtaMsg::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OtaMsg::clear_device_id() {
  if (device_id_ != &::google_public::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& OtaMsg::device_id() const {
  return *device_id_;
}
inline void OtaMsg::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google_public::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void OtaMsg::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google_public::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void OtaMsg::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google_public::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtaMsg::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google_public::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* OtaMsg::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtaMsg::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google_public::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string uid = 4;
inline bool OtaMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OtaMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OtaMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OtaMsg::clear_uid() {
  if (uid_ != &::google_public::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& OtaMsg::uid() const {
  return *uid_;
}
inline void OtaMsg::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google_public::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void OtaMsg::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google_public::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void OtaMsg::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google_public::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtaMsg::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google_public::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* OtaMsg::release_uid() {
  clear_has_uid();
  if (uid_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtaMsg::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google_public::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required int64 time_stamp = 5;
inline bool OtaMsg::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OtaMsg::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OtaMsg::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OtaMsg::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google_public::protobuf::int64 OtaMsg::time_stamp() const {
  return time_stamp_;
}
inline void OtaMsg::set_time_stamp(::google_public::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// optional string server_handler = 10;
inline bool OtaMsg::has_server_handler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OtaMsg::set_has_server_handler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OtaMsg::clear_has_server_handler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OtaMsg::clear_server_handler() {
  if (server_handler_ != &::google_public::protobuf::internal::kEmptyString) {
    server_handler_->clear();
  }
  clear_has_server_handler();
}
inline const ::std::string& OtaMsg::server_handler() const {
  return *server_handler_;
}
inline void OtaMsg::set_server_handler(const ::std::string& value) {
  set_has_server_handler();
  if (server_handler_ == &::google_public::protobuf::internal::kEmptyString) {
    server_handler_ = new ::std::string;
  }
  server_handler_->assign(value);
}
inline void OtaMsg::set_server_handler(const char* value) {
  set_has_server_handler();
  if (server_handler_ == &::google_public::protobuf::internal::kEmptyString) {
    server_handler_ = new ::std::string;
  }
  server_handler_->assign(value);
}
inline void OtaMsg::set_server_handler(const char* value, size_t size) {
  set_has_server_handler();
  if (server_handler_ == &::google_public::protobuf::internal::kEmptyString) {
    server_handler_ = new ::std::string;
  }
  server_handler_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtaMsg::mutable_server_handler() {
  set_has_server_handler();
  if (server_handler_ == &::google_public::protobuf::internal::kEmptyString) {
    server_handler_ = new ::std::string;
  }
  return server_handler_;
}
inline ::std::string* OtaMsg::release_server_handler() {
  clear_has_server_handler();
  if (server_handler_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_handler_;
    server_handler_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtaMsg::set_allocated_server_handler(::std::string* server_handler) {
  if (server_handler_ != &::google_public::protobuf::internal::kEmptyString) {
    delete server_handler_;
  }
  if (server_handler) {
    set_has_server_handler();
    server_handler_ = server_handler;
  } else {
    clear_has_server_handler();
    server_handler_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// optional string debug_info = 100;
inline bool OtaMsg::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OtaMsg::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OtaMsg::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OtaMsg::clear_debug_info() {
  if (debug_info_ != &::google_public::protobuf::internal::kEmptyString) {
    debug_info_->clear();
  }
  clear_has_debug_info();
}
inline const ::std::string& OtaMsg::debug_info() const {
  return *debug_info_;
}
inline void OtaMsg::set_debug_info(const ::std::string& value) {
  set_has_debug_info();
  if (debug_info_ == &::google_public::protobuf::internal::kEmptyString) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(value);
}
inline void OtaMsg::set_debug_info(const char* value) {
  set_has_debug_info();
  if (debug_info_ == &::google_public::protobuf::internal::kEmptyString) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(value);
}
inline void OtaMsg::set_debug_info(const char* value, size_t size) {
  set_has_debug_info();
  if (debug_info_ == &::google_public::protobuf::internal::kEmptyString) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtaMsg::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == &::google_public::protobuf::internal::kEmptyString) {
    debug_info_ = new ::std::string;
  }
  return debug_info_;
}
inline ::std::string* OtaMsg::release_debug_info() {
  clear_has_debug_info();
  if (debug_info_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_info_;
    debug_info_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtaMsg::set_allocated_debug_info(::std::string* debug_info) {
  if (debug_info_ != &::google_public::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (debug_info) {
    set_has_debug_info();
    debug_info_ = debug_info;
  } else {
    clear_has_debug_info();
    debug_info_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OtaMulticast

// required string multicast_id = 1;
inline bool OtaMulticast::has_multicast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtaMulticast::set_has_multicast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtaMulticast::clear_has_multicast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtaMulticast::clear_multicast_id() {
  if (multicast_id_ != &::google_public::protobuf::internal::kEmptyString) {
    multicast_id_->clear();
  }
  clear_has_multicast_id();
}
inline const ::std::string& OtaMulticast::multicast_id() const {
  return *multicast_id_;
}
inline void OtaMulticast::set_multicast_id(const ::std::string& value) {
  set_has_multicast_id();
  if (multicast_id_ == &::google_public::protobuf::internal::kEmptyString) {
    multicast_id_ = new ::std::string;
  }
  multicast_id_->assign(value);
}
inline void OtaMulticast::set_multicast_id(const char* value) {
  set_has_multicast_id();
  if (multicast_id_ == &::google_public::protobuf::internal::kEmptyString) {
    multicast_id_ = new ::std::string;
  }
  multicast_id_->assign(value);
}
inline void OtaMulticast::set_multicast_id(const char* value, size_t size) {
  set_has_multicast_id();
  if (multicast_id_ == &::google_public::protobuf::internal::kEmptyString) {
    multicast_id_ = new ::std::string;
  }
  multicast_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtaMulticast::mutable_multicast_id() {
  set_has_multicast_id();
  if (multicast_id_ == &::google_public::protobuf::internal::kEmptyString) {
    multicast_id_ = new ::std::string;
  }
  return multicast_id_;
}
inline ::std::string* OtaMulticast::release_multicast_id() {
  clear_has_multicast_id();
  if (multicast_id_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = multicast_id_;
    multicast_id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtaMulticast::set_allocated_multicast_id(::std::string* multicast_id) {
  if (multicast_id_ != &::google_public::protobuf::internal::kEmptyString) {
    delete multicast_id_;
  }
  if (multicast_id) {
    set_has_multicast_id();
    multicast_id_ = multicast_id;
  } else {
    clear_has_multicast_id();
    multicast_id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// repeated string uid = 2;
inline int OtaMulticast::uid_size() const {
  return uid_.size();
}
inline void OtaMulticast::clear_uid() {
  uid_.Clear();
}
inline const ::std::string& OtaMulticast::uid(int index) const {
  return uid_.Get(index);
}
inline ::std::string* OtaMulticast::mutable_uid(int index) {
  return uid_.Mutable(index);
}
inline void OtaMulticast::set_uid(int index, const ::std::string& value) {
  uid_.Mutable(index)->assign(value);
}
inline void OtaMulticast::set_uid(int index, const char* value) {
  uid_.Mutable(index)->assign(value);
}
inline void OtaMulticast::set_uid(int index, const char* value, size_t size) {
  uid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtaMulticast::add_uid() {
  return uid_.Add();
}
inline void OtaMulticast::add_uid(const ::std::string& value) {
  uid_.Add()->assign(value);
}
inline void OtaMulticast::add_uid(const char* value) {
  uid_.Add()->assign(value);
}
inline void OtaMulticast::add_uid(const char* value, size_t size) {
  uid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
OtaMulticast::uid() const {
  return uid_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
OtaMulticast::mutable_uid() {
  return &uid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace luyun
}  // namespace com

#ifndef SWIG
namespace google_public {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
