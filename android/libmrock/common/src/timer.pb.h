// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timer.proto

#ifndef PROTOBUF_timer_2eproto__INCLUDED
#define PROTOBUF_timer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace luyun {
namespace timer {
namespace shared {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_timer_2eproto();
void protobuf_AssignDesc_timer_2eproto();
void protobuf_ShutdownFile_timer_2eproto();

class LYTimerMsg;

enum LYTimerAction {
  LY_TIMER_REG = 1,
  LY_TIMER_CAN = 2,
  LY_TIMER_FIRE = 3,
  LY_TIMER_RESET = 4,
  LY_TIMER_CONF = 5,
  LY_TIMER_SHAKE_HAND = 99
};
bool LYTimerAction_IsValid(int value);
const LYTimerAction LYTimerAction_MIN = LY_TIMER_REG;
const LYTimerAction LYTimerAction_MAX = LY_TIMER_SHAKE_HAND;
const int LYTimerAction_ARRAYSIZE = LYTimerAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* LYTimerAction_descriptor();
inline const ::std::string& LYTimerAction_Name(LYTimerAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    LYTimerAction_descriptor(), value);
}
inline bool LYTimerAction_Parse(
    const ::std::string& name, LYTimerAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LYTimerAction>(
    LYTimerAction_descriptor(), name, value);
}
// ===================================================================

class LYTimerMsg : public ::google::protobuf::Message {
 public:
  LYTimerMsg();
  virtual ~LYTimerMsg();

  LYTimerMsg(const LYTimerMsg& from);

  inline LYTimerMsg& operator=(const LYTimerMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LYTimerMsg& default_instance();

  void Swap(LYTimerMsg* other);

  // implements Message ----------------------------------------------

  LYTimerMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LYTimerMsg& from);
  void MergeFrom(const LYTimerMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional bytes client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const void* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // required .com.luyun.timer.shared.LYTimerAction action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::com::luyun::timer::shared::LYTimerAction action() const;
  inline void set_action(::com::luyun::timer::shared::LYTimerAction value);

  // optional string server_timer_id = 4;
  inline bool has_server_timer_id() const;
  inline void clear_server_timer_id();
  static const int kServerTimerIdFieldNumber = 4;
  inline const ::std::string& server_timer_id() const;
  inline void set_server_timer_id(const ::std::string& value);
  inline void set_server_timer_id(const char* value);
  inline void set_server_timer_id(const char* value, size_t size);
  inline ::std::string* mutable_server_timer_id();
  inline ::std::string* release_server_timer_id();
  inline void set_allocated_server_timer_id(::std::string* server_timer_id);

  // optional string client_timer_id = 5;
  inline bool has_client_timer_id() const;
  inline void clear_client_timer_id();
  static const int kClientTimerIdFieldNumber = 5;
  inline const ::std::string& client_timer_id() const;
  inline void set_client_timer_id(const ::std::string& value);
  inline void set_client_timer_id(const char* value);
  inline void set_client_timer_id(const char* value, size_t size);
  inline ::std::string* mutable_client_timer_id();
  inline ::std::string* release_client_timer_id();
  inline void set_allocated_client_timer_id(::std::string* client_timer_id);

  // optional string second_client_timer_id = 6;
  inline bool has_second_client_timer_id() const;
  inline void clear_second_client_timer_id();
  static const int kSecondClientTimerIdFieldNumber = 6;
  inline const ::std::string& second_client_timer_id() const;
  inline void set_second_client_timer_id(const ::std::string& value);
  inline void set_second_client_timer_id(const char* value);
  inline void set_second_client_timer_id(const char* value, size_t size);
  inline ::std::string* mutable_second_client_timer_id();
  inline ::std::string* release_second_client_timer_id();
  inline void set_allocated_second_client_timer_id(::std::string* second_client_timer_id);

  // optional float after = 7;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 7;
  inline float after() const;
  inline void set_after(float value);

  // optional float repeat = 8;
  inline bool has_repeat() const;
  inline void clear_repeat();
  static const int kRepeatFieldNumber = 8;
  inline float repeat() const;
  inline void set_repeat(float value);

  // optional int32 will_stop_at = 9;
  inline bool has_will_stop_at() const;
  inline void clear_will_stop_at();
  static const int kWillStopAtFieldNumber = 9;
  inline ::google::protobuf::int32 will_stop_at() const;
  inline void set_will_stop_at(::google::protobuf::int32 value);

  // optional int32 client_reserved1 = 11;
  inline bool has_client_reserved1() const;
  inline void clear_client_reserved1();
  static const int kClientReserved1FieldNumber = 11;
  inline ::google::protobuf::int32 client_reserved1() const;
  inline void set_client_reserved1(::google::protobuf::int32 value);

  // optional int32 client_reserved2 = 12;
  inline bool has_client_reserved2() const;
  inline void clear_client_reserved2();
  static const int kClientReserved2FieldNumber = 12;
  inline ::google::protobuf::int32 client_reserved2() const;
  inline void set_client_reserved2(::google::protobuf::int32 value);

  // optional int32 client_reserved3 = 13;
  inline bool has_client_reserved3() const;
  inline void clear_client_reserved3();
  static const int kClientReserved3FieldNumber = 13;
  inline ::google::protobuf::int32 client_reserved3() const;
  inline void set_client_reserved3(::google::protobuf::int32 value);

  // optional int32 client_reserved4 = 14;
  inline bool has_client_reserved4() const;
  inline void clear_client_reserved4();
  static const int kClientReserved4FieldNumber = 14;
  inline ::google::protobuf::int32 client_reserved4() const;
  inline void set_client_reserved4(::google::protobuf::int32 value);

  // optional int32 client_reserved5 = 15;
  inline bool has_client_reserved5() const;
  inline void clear_client_reserved5();
  static const int kClientReserved5FieldNumber = 15;
  inline ::google::protobuf::int32 client_reserved5() const;
  inline void set_client_reserved5(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.luyun.timer.shared.LYTimerMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_server_timer_id();
  inline void clear_has_server_timer_id();
  inline void set_has_client_timer_id();
  inline void clear_has_client_timer_id();
  inline void set_has_second_client_timer_id();
  inline void clear_has_second_client_timer_id();
  inline void set_has_after();
  inline void clear_has_after();
  inline void set_has_repeat();
  inline void clear_has_repeat();
  inline void set_has_will_stop_at();
  inline void clear_has_will_stop_at();
  inline void set_has_client_reserved1();
  inline void clear_has_client_reserved1();
  inline void set_has_client_reserved2();
  inline void clear_has_client_reserved2();
  inline void set_has_client_reserved3();
  inline void clear_has_client_reserved3();
  inline void set_has_client_reserved4();
  inline void clear_has_client_reserved4();
  inline void set_has_client_reserved5();
  inline void clear_has_client_reserved5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_id_;
  ::google::protobuf::int32 version_;
  int action_;
  ::std::string* server_timer_id_;
  ::std::string* client_timer_id_;
  ::std::string* second_client_timer_id_;
  float after_;
  float repeat_;
  ::google::protobuf::int32 will_stop_at_;
  ::google::protobuf::int32 client_reserved1_;
  ::google::protobuf::int32 client_reserved2_;
  ::google::protobuf::int32 client_reserved3_;
  ::google::protobuf::int32 client_reserved4_;
  ::google::protobuf::int32 client_reserved5_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_timer_2eproto();
  friend void protobuf_AssignDesc_timer_2eproto();
  friend void protobuf_ShutdownFile_timer_2eproto();

  void InitAsDefaultInstance();
  static LYTimerMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// LYTimerMsg

// required int32 version = 1;
inline bool LYTimerMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LYTimerMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LYTimerMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LYTimerMsg::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 LYTimerMsg::version() const {
  return version_;
}
inline void LYTimerMsg::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional bytes client_id = 2;
inline bool LYTimerMsg::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LYTimerMsg::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LYTimerMsg::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LYTimerMsg::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& LYTimerMsg::client_id() const {
  return *client_id_;
}
inline void LYTimerMsg::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void LYTimerMsg::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void LYTimerMsg::set_client_id(const void* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LYTimerMsg::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* LYTimerMsg::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LYTimerMsg::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .com.luyun.timer.shared.LYTimerAction action = 3;
inline bool LYTimerMsg::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LYTimerMsg::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LYTimerMsg::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LYTimerMsg::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::com::luyun::timer::shared::LYTimerAction LYTimerMsg::action() const {
  return static_cast< ::com::luyun::timer::shared::LYTimerAction >(action_);
}
inline void LYTimerMsg::set_action(::com::luyun::timer::shared::LYTimerAction value) {
  assert(::com::luyun::timer::shared::LYTimerAction_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional string server_timer_id = 4;
inline bool LYTimerMsg::has_server_timer_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LYTimerMsg::set_has_server_timer_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LYTimerMsg::clear_has_server_timer_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LYTimerMsg::clear_server_timer_id() {
  if (server_timer_id_ != &::google::protobuf::internal::kEmptyString) {
    server_timer_id_->clear();
  }
  clear_has_server_timer_id();
}
inline const ::std::string& LYTimerMsg::server_timer_id() const {
  return *server_timer_id_;
}
inline void LYTimerMsg::set_server_timer_id(const ::std::string& value) {
  set_has_server_timer_id();
  if (server_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    server_timer_id_ = new ::std::string;
  }
  server_timer_id_->assign(value);
}
inline void LYTimerMsg::set_server_timer_id(const char* value) {
  set_has_server_timer_id();
  if (server_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    server_timer_id_ = new ::std::string;
  }
  server_timer_id_->assign(value);
}
inline void LYTimerMsg::set_server_timer_id(const char* value, size_t size) {
  set_has_server_timer_id();
  if (server_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    server_timer_id_ = new ::std::string;
  }
  server_timer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LYTimerMsg::mutable_server_timer_id() {
  set_has_server_timer_id();
  if (server_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    server_timer_id_ = new ::std::string;
  }
  return server_timer_id_;
}
inline ::std::string* LYTimerMsg::release_server_timer_id() {
  clear_has_server_timer_id();
  if (server_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_timer_id_;
    server_timer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LYTimerMsg::set_allocated_server_timer_id(::std::string* server_timer_id) {
  if (server_timer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_timer_id_;
  }
  if (server_timer_id) {
    set_has_server_timer_id();
    server_timer_id_ = server_timer_id;
  } else {
    clear_has_server_timer_id();
    server_timer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string client_timer_id = 5;
inline bool LYTimerMsg::has_client_timer_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LYTimerMsg::set_has_client_timer_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LYTimerMsg::clear_has_client_timer_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LYTimerMsg::clear_client_timer_id() {
  if (client_timer_id_ != &::google::protobuf::internal::kEmptyString) {
    client_timer_id_->clear();
  }
  clear_has_client_timer_id();
}
inline const ::std::string& LYTimerMsg::client_timer_id() const {
  return *client_timer_id_;
}
inline void LYTimerMsg::set_client_timer_id(const ::std::string& value) {
  set_has_client_timer_id();
  if (client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    client_timer_id_ = new ::std::string;
  }
  client_timer_id_->assign(value);
}
inline void LYTimerMsg::set_client_timer_id(const char* value) {
  set_has_client_timer_id();
  if (client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    client_timer_id_ = new ::std::string;
  }
  client_timer_id_->assign(value);
}
inline void LYTimerMsg::set_client_timer_id(const char* value, size_t size) {
  set_has_client_timer_id();
  if (client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    client_timer_id_ = new ::std::string;
  }
  client_timer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LYTimerMsg::mutable_client_timer_id() {
  set_has_client_timer_id();
  if (client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    client_timer_id_ = new ::std::string;
  }
  return client_timer_id_;
}
inline ::std::string* LYTimerMsg::release_client_timer_id() {
  clear_has_client_timer_id();
  if (client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_timer_id_;
    client_timer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LYTimerMsg::set_allocated_client_timer_id(::std::string* client_timer_id) {
  if (client_timer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_timer_id_;
  }
  if (client_timer_id) {
    set_has_client_timer_id();
    client_timer_id_ = client_timer_id;
  } else {
    clear_has_client_timer_id();
    client_timer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string second_client_timer_id = 6;
inline bool LYTimerMsg::has_second_client_timer_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LYTimerMsg::set_has_second_client_timer_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LYTimerMsg::clear_has_second_client_timer_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LYTimerMsg::clear_second_client_timer_id() {
  if (second_client_timer_id_ != &::google::protobuf::internal::kEmptyString) {
    second_client_timer_id_->clear();
  }
  clear_has_second_client_timer_id();
}
inline const ::std::string& LYTimerMsg::second_client_timer_id() const {
  return *second_client_timer_id_;
}
inline void LYTimerMsg::set_second_client_timer_id(const ::std::string& value) {
  set_has_second_client_timer_id();
  if (second_client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    second_client_timer_id_ = new ::std::string;
  }
  second_client_timer_id_->assign(value);
}
inline void LYTimerMsg::set_second_client_timer_id(const char* value) {
  set_has_second_client_timer_id();
  if (second_client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    second_client_timer_id_ = new ::std::string;
  }
  second_client_timer_id_->assign(value);
}
inline void LYTimerMsg::set_second_client_timer_id(const char* value, size_t size) {
  set_has_second_client_timer_id();
  if (second_client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    second_client_timer_id_ = new ::std::string;
  }
  second_client_timer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LYTimerMsg::mutable_second_client_timer_id() {
  set_has_second_client_timer_id();
  if (second_client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    second_client_timer_id_ = new ::std::string;
  }
  return second_client_timer_id_;
}
inline ::std::string* LYTimerMsg::release_second_client_timer_id() {
  clear_has_second_client_timer_id();
  if (second_client_timer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = second_client_timer_id_;
    second_client_timer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LYTimerMsg::set_allocated_second_client_timer_id(::std::string* second_client_timer_id) {
  if (second_client_timer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete second_client_timer_id_;
  }
  if (second_client_timer_id) {
    set_has_second_client_timer_id();
    second_client_timer_id_ = second_client_timer_id;
  } else {
    clear_has_second_client_timer_id();
    second_client_timer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float after = 7;
inline bool LYTimerMsg::has_after() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LYTimerMsg::set_has_after() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LYTimerMsg::clear_has_after() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LYTimerMsg::clear_after() {
  after_ = 0;
  clear_has_after();
}
inline float LYTimerMsg::after() const {
  return after_;
}
inline void LYTimerMsg::set_after(float value) {
  set_has_after();
  after_ = value;
}

// optional float repeat = 8;
inline bool LYTimerMsg::has_repeat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LYTimerMsg::set_has_repeat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LYTimerMsg::clear_has_repeat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LYTimerMsg::clear_repeat() {
  repeat_ = 0;
  clear_has_repeat();
}
inline float LYTimerMsg::repeat() const {
  return repeat_;
}
inline void LYTimerMsg::set_repeat(float value) {
  set_has_repeat();
  repeat_ = value;
}

// optional int32 will_stop_at = 9;
inline bool LYTimerMsg::has_will_stop_at() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LYTimerMsg::set_has_will_stop_at() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LYTimerMsg::clear_has_will_stop_at() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LYTimerMsg::clear_will_stop_at() {
  will_stop_at_ = 0;
  clear_has_will_stop_at();
}
inline ::google::protobuf::int32 LYTimerMsg::will_stop_at() const {
  return will_stop_at_;
}
inline void LYTimerMsg::set_will_stop_at(::google::protobuf::int32 value) {
  set_has_will_stop_at();
  will_stop_at_ = value;
}

// optional int32 client_reserved1 = 11;
inline bool LYTimerMsg::has_client_reserved1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LYTimerMsg::set_has_client_reserved1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LYTimerMsg::clear_has_client_reserved1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LYTimerMsg::clear_client_reserved1() {
  client_reserved1_ = 0;
  clear_has_client_reserved1();
}
inline ::google::protobuf::int32 LYTimerMsg::client_reserved1() const {
  return client_reserved1_;
}
inline void LYTimerMsg::set_client_reserved1(::google::protobuf::int32 value) {
  set_has_client_reserved1();
  client_reserved1_ = value;
}

// optional int32 client_reserved2 = 12;
inline bool LYTimerMsg::has_client_reserved2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LYTimerMsg::set_has_client_reserved2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LYTimerMsg::clear_has_client_reserved2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LYTimerMsg::clear_client_reserved2() {
  client_reserved2_ = 0;
  clear_has_client_reserved2();
}
inline ::google::protobuf::int32 LYTimerMsg::client_reserved2() const {
  return client_reserved2_;
}
inline void LYTimerMsg::set_client_reserved2(::google::protobuf::int32 value) {
  set_has_client_reserved2();
  client_reserved2_ = value;
}

// optional int32 client_reserved3 = 13;
inline bool LYTimerMsg::has_client_reserved3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LYTimerMsg::set_has_client_reserved3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LYTimerMsg::clear_has_client_reserved3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LYTimerMsg::clear_client_reserved3() {
  client_reserved3_ = 0;
  clear_has_client_reserved3();
}
inline ::google::protobuf::int32 LYTimerMsg::client_reserved3() const {
  return client_reserved3_;
}
inline void LYTimerMsg::set_client_reserved3(::google::protobuf::int32 value) {
  set_has_client_reserved3();
  client_reserved3_ = value;
}

// optional int32 client_reserved4 = 14;
inline bool LYTimerMsg::has_client_reserved4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LYTimerMsg::set_has_client_reserved4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LYTimerMsg::clear_has_client_reserved4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LYTimerMsg::clear_client_reserved4() {
  client_reserved4_ = 0;
  clear_has_client_reserved4();
}
inline ::google::protobuf::int32 LYTimerMsg::client_reserved4() const {
  return client_reserved4_;
}
inline void LYTimerMsg::set_client_reserved4(::google::protobuf::int32 value) {
  set_has_client_reserved4();
  client_reserved4_ = value;
}

// optional int32 client_reserved5 = 15;
inline bool LYTimerMsg::has_client_reserved5() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LYTimerMsg::set_has_client_reserved5() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LYTimerMsg::clear_has_client_reserved5() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LYTimerMsg::clear_client_reserved5() {
  client_reserved5_ = 0;
  clear_has_client_reserved5();
}
inline ::google::protobuf::int32 LYTimerMsg::client_reserved5() const {
  return client_reserved5_;
}
inline void LYTimerMsg::set_client_reserved5(::google::protobuf::int32 value) {
  set_has_client_reserved5();
  client_reserved5_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace shared
}  // namespace timer
}  // namespace luyun
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::luyun::timer::shared::LYTimerAction>() {
  return ::com::luyun::timer::shared::LYTimerAction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_timer_2eproto__INCLUDED
