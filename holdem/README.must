1、把所有的log都删掉了
2、zmq也移出库，即删除原LYHoldemMsgHandler.h/.cpp两个文件

cat LYHoldemMsgHandler.h:

/*
 * HoldemMsgHandler.h
 *
 *  Created on: 2013-6-27
 *      Author: caiqingfeng
 */

#ifndef LYHOLDEMMSGHANDLER_H_
#define LYHOLDEMMSGHANDLER_H_

#include "common/src/zhelpers.hpp"
#include "common/src/holdem.pb.h"

using namespace com::luyun::holdem;
using namespace std;

class LYHoldemMsgHandler {
public:
    zmq::socket_t &peer_zmq;

public:
	LYHoldemMsgHandler(zmq::socket_t &peer);
	virtual ~LYHoldemMsgHandler();

	void onMetaMsg(const string &msg);
	virtual void onMsg(shared::LYOtaMsg &msg) = 0;
	virtual void sendMsg(shared::LYOtaMsg& dlmsg, const string& uid) = 0;
	virtual void sendMcastMsg(shared::LYOtaMsg& dlmsg, const std::vector<string> & uids) = 0;
	virtual void zmq_sendmore_wrapper(zmq::socket_t &z, const string &msg) {}; //为了增加可测性，在测试函数中重载此方法即可实现不连ZMQ也能单元测试的目的
	virtual void zmq_send_wrapper(zmq::socket_t &z, const string &msg) {}; //为了增加可测性，在测试函数中重载此方法即可实现不连ZMQ也能单元测试的目的
};

#endif /* HOLDEMMSGHANDLER_H_ */

cat LYHoldemMsgHandler.cpp

/*
 * HoldemMsgHandler.cpp
 *
 *  Created on: 2013-6-27
 *      Author: caiqingfeng
 */

#include "LYHoldemMsgHandler.h"
#include "common/src/my_log.h"

using namespace com::luyun::holdem::shared;

LYHoldemMsgHandler::LYHoldemMsgHandler(zmq::socket_t &peer) :
	peer_zmq(peer)
{
	// TODO Auto-generated constructor stub

}

LYHoldemMsgHandler::~LYHoldemMsgHandler() {
	// TODO Auto-generated destructor stub
}

void LYHoldemMsgHandler::onMetaMsg(const string &encoded_msg)
{
    LYOtaMsg msg;
    try {
        if (!msg.ParseFromString(encoded_msg))
        {
            LY_LOG_ERR("ParseFromString fail");
            return;
        }

        LY_LOG_INF(msg.DebugString());

//        string uid = msg.uid();
//        if(!users.haveUser(uid))
//        {
//            users.loadUser(uid, msg.device_id());
//        }
//        if(users.haveUser(uid))
//        {
//            users.getUser(uid)->set_active();
//        }
        onMsg(msg);

    } catch (std::exception& e) {
        LY_LOG_ERR("onMsg exception" << e.what());
    }
}


